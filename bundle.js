!function(){"use strict";var e=function(e,r,n,t){return new(n||(n=Promise))((function(a,i){function u(e){try{s(t.next(e))}catch(r){i(r)}}function o(e){try{s(t.throw(e))}catch(r){i(r)}}function s(e){var r;e.done?a(e.value):(r=e.value,r instanceof n?r:new n((function(e){e(r)}))).then(u,o)}s((t=t.apply(e,r||[])).next())}))},r=function(e,r){var n,t,a,i,u={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"===typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,t&&(a=2&i[0]?t.return:i[0]?t.throw||((a=t.return)&&a.call(t),0):t.next)&&!(a=a.call(t,i[1])).done)return a;switch(t=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,t=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(a=(a=u.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){u.label=i[1];break}if(6===i[0]&&u.label<a[1]){u.label=a[1],a=i;break}if(a&&u.label<a[2]){u.label=a[2],u.ops.push(i);break}a[2]&&u.ops.pop(),u.trys.pop();continue}i=r.call(e,u)}catch(o){i=[6,o],t=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,o])}}};(function(){return e(this,void 0,void 0,(function(){var e,n,t,a,i,u,o,s,l,c,f,d,p,g,b,y,x,M,h,v;return r(this,(function(r){switch(r.label){case 0:return[4,navigator.gpu.requestAdapter()];case 1:return(e=r.sent())?[4,e.requestDevice()]:[2];case 2:return n=r.sent(),t=new Float32Array([2,4,1,2,3,4,5,6,7,8]),a=n.createBuffer({mappedAtCreation:!0,size:t.byteLength,usage:GPUBufferUsage.STORAGE}),i=a.getMappedRange(),new Float32Array(i).set(t),a.unmap(),u=new Float32Array([4,2,1,2,3,4,5,6,7,8]),o=n.createBuffer({mappedAtCreation:!0,size:u.byteLength,usage:GPUBufferUsage.STORAGE}),s=o.getMappedRange(),new Float32Array(s).set(u),o.unmap(),l=Float32Array.BYTES_PER_ELEMENT*(2+t[0]*u[1]),c=n.createBuffer({size:l,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),f=n.createShaderModule({code:"\nstruct Matrix {\n  size : vec2<f32>,\n  numbers: array<f32>,\n}\n\n@group(0) @binding(0) var<storage, read> firstMatrix : Matrix;\n@group(0) @binding(1) var<storage, read> secondMatrix : Matrix;\n@group(0) @binding(2) var<storage, write> resultMatrix : Matrix;\n\n@compute @workgroup_size(8, 8)\nfn main(@builtin(global_invocation_id) global_id : vec3<u32>) {\n  // Guard against out-of-bounds work group sizes\n  if (global_id.x >= u32(firstMatrix.size.x) || global_id.y >= u32(secondMatrix.size.y)) {\n    return;\n  }\n\n  resultMatrix.size = vec2(firstMatrix.size.x, secondMatrix.size.y);\n\n  let resultCell = vec2(global_id.x, global_id.y);\n  var result = 0.0;\n  for (var i = 0u; i < u32(firstMatrix.size.y); i = i + 1u) {\n    let a = i + resultCell.x * u32(firstMatrix.size.y);\n    let b = resultCell.y + i * u32(secondMatrix.size.y);\n    result = result + firstMatrix.numbers[a] * secondMatrix.numbers[b];\n  }\n\n  let index = resultCell.y + resultCell.x * u32(secondMatrix.size.y);\n  resultMatrix.numbers[index] = result;\n}\n"}),d=n.createComputePipeline({compute:{module:f,entryPoint:"main"}}),p=n.createBindGroup({layout:d.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:a}},{binding:1,resource:{buffer:o}},{binding:2,resource:{buffer:c}}]}),g=n.createCommandEncoder(),b=Math.ceil(t[0]/8),y=Math.ceil(u[1]/8),(x=g.beginComputePass()).setPipeline(d),x.setBindGroup(0,p),x.dispatchWorkgroups(b,y),x.endPass&&(x.end=x.endPass),x.end(),M=n.createBuffer({size:l,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),g.copyBufferToBuffer(c,0,M,0,l),h=g.finish(),n.queue.submit([h]),[4,M.mapAsync(GPUMapMode.READ)];case 3:return r.sent(),v=M.getMappedRange(),console.log(new Float32Array(v)),[2]}}))}))})().catch((function(e){return console.error(e)}))}();